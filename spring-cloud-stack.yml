version: '3.7'

services:

##DB

  db:
    image: postgres:latest
    restart: always
    ports:
      - 5432:5432
    environment:
      - POSTGRES_DB=demo
      - POSTGRES_USER=demo
      - POSTGRES_PASSWORD=demo
      - PG_SYSTEM_SHARED_BUFFERS=256MB
      - PG_SYSTEM_MAX_CONNECTIONS=200
    command: ["-c", "shared_buffers=256MB", "-c", "max_connections=200"]     
    volumes:
      - postgres-data-volume:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '2'   
    networks:
     - backend      

##ConfigServer Spring Boot

  configserver:
    image: tecnicume/config:1
    build:
      context: ./configserver
      dockerfile: Dockerfile
    volumes:
      - /tmp/cloud
    ports:
      - "8888:8888"
    environment:
      SERVER_PORT : 8888         
      JAVA_OPTS: >
          -XX:+UnlockExperimentalVMOptions
          -XX:+UseCGroupMemoryLimitForHeap
          -XX:InitialRAMFraction=2
          -XX:MaxRAMFraction=2
          -XX:ParallelGCThreads=2
          -XX:ConcGCThreads=2
          -XX:CICompilerCount=2
          -Djava.util.concurrent.ForkJoinPool.common.parallelism=2
    deploy:
        resources:
          limits:
            memory: 512M
            cpus: '2'      
    networks:
     - backend
    restart: always

##ZipKin Spring Boot      
  zipkin:
    image: tecnicume/zipkin:1
    build:
      context: ./zipkin
      dockerfile: Dockerfile
    volumes:
      - /tmp/cloud
    ports:
      - "9411:9411"
    environment:
      SERVER_PORT: 9411
      JAVA_OPTS: >
          -XX:+UnlockExperimentalVMOptions
          -XX:+UseCGroupMemoryLimitForHeap
          -XX:InitialRAMFraction=2
          -XX:MaxRAMFraction=2
          -XX:ParallelGCThreads=2
          -XX:ConcGCThreads=2
          -XX:CICompilerCount=2
          -Djava.util.concurrent.ForkJoinPool.common.parallelism=2
    deploy:
        resources:
          limits:
            memory: 512M
            cpus: '2'      
    networks:
     - backend
    restart: always
      
## Eureka Node 1 Spring Boot             
  eureka-node1:
    image: tecnicume/eureka:1
    build:
      context: ./eureka
      dockerfile: Dockerfile
    volumes:
      - /tmp/cloud
    ports:
      - "8761:8761"
    depends_on:
      - "zipkin"
      - "configserver"      
    environment:
      SERVER_PORT: 8761
      SPRING_ZIPKIN_BASEURL : "http://zipkin:9411/"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eureka-node2:8762/eureka/,http://eureka-node1:8761/eureka/"
      EUREKA_CLIENT_SERVICEURL_REGISTER-WITH-EUREKA : "true"
      EUREKA_CLIENT_SERVICEURL_FETCH-REGISTRY : "true"
      EUREKA_INSTANCE_HOSTNAME : eureka-node1
      EUREKA_INSTANCE_APPNAME : eureka-cluster
      JAVA_OPTS: >
          -XX:+UnlockExperimentalVMOptions
          -XX:+UseCGroupMemoryLimitForHeap
          -XX:InitialRAMFraction=2
          -XX:MaxRAMFraction=2
          -XX:ParallelGCThreads=2
          -XX:ConcGCThreads=2
          -XX:CICompilerCount=2
          -Djava.util.concurrent.ForkJoinPool.common.parallelism=2
    deploy:
        resources:
          limits:
            memory: 512M
            cpus: '2'      

    networks:
     - backend
    restart: always

##  Eureka Node 2 Spring Boot
             
  eureka-node2:
    image: tecnicume/eureka:1
    build:
      context: ./eureka
      dockerfile: Dockerfile
    volumes:
      - /tmp/cloud
    ports:
      - "8762:8762"
    depends_on:
      - "zipkin"      
      - "configserver"
      - "eureka-node1"
    environment:
      SERVER_PORT: 8762
      SPRING_ZIPKIN_BASEURL : "http://zipkin:9411/" 
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eureka-node1:8761/eureka/,http://eureka-node2:8762/eureka/"
      EUREKA_CLIENT_SERVICEURL_REGISTER-WITH-EUREKA: "true"
      EUREKA_CLIENT_SERVICEURL_FETCH-REGISTRY: "true"
      EUREKA_INSTANCE_HOSTNAME: eureka-node2
      EUREKA_INSTANCE_APPNAME: eureka-cluster
      JAVA_OPTS: >
          -XX:+UnlockExperimentalVMOptions
          -XX:+UseCGroupMemoryLimitForHeap
          -XX:InitialRAMFraction=2
          -XX:MaxRAMFraction=2
          -XX:ParallelGCThreads=2
          -XX:ConcGCThreads=2
          -XX:CICompilerCount=2
          -Djava.util.concurrent.ForkJoinPool.common.parallelism=2
    deploy:
        resources:
          limits:
            memory: 512M
            cpus: '2'      

    networks:
     - backend
    restart: always


##Api Gateway Spring Boot 
  apigateway:
    image: tecnicume/apigateway:1
    build:
      context: ./apigateway
      dockerfile: Dockerfile
    volumes:
      - /tmp/cloud
    ports:
      - "9090:9090"
    networks:
     - backend      
    depends_on:
      - "configserver"
      - "zipkin"
      - "eureka-node1"
      - "eureka-node2"
      - "db"     
    environment:
      SERVER_PORT: 9090
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eureka-node1:8761/eureka/,http://eureka-node2:8762/eureka/"
      SPRING_CONFIG_URL: "http://configserver:8888/"
      SPRING_ZIPKIN_BASEURL: "http://zipkin:9411/"
      JAVA_OPTS: >
          -XX:+UnlockExperimentalVMOptions
          -XX:+UseCGroupMemoryLimitForHeap
          -XX:InitialRAMFraction=2
          -XX:MaxRAMFraction=2
          -XX:ParallelGCThreads=2
          -XX:ConcGCThreads=2
          -XX:CICompilerCount=2
          -Djava.util.concurrent.ForkJoinPool.common.parallelism=2
    deploy:
        resources:
          limits:
            memory: 512M
            cpus: '2'      

    restart: always

## Micro Service Spring Boot                     
  ms:
    image: tecnicume/ms:1
    build:
      context: ./microservice
      dockerfile: Dockerfile
    volumes:
      - /tmp/cloud
    ports:
      - "8090:8090"
    networks:
     - backend      
    depends_on:
      - "configserver"
      - "zipkin"
      - "eureka-node1"
      - "eureka-node2"
      - "db"     
      - "admin"         
      - "apigateway"
    environment:
       SERVER_PORT: 8090
       EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eureka-node1:8761/eureka/,http://eureka-node2:8762/eureka/"
       SPRING_CONFIG_URL: "http://configserver:8888/"
       SPRING_ZIPKIN_BASEURL: "http://zipkin:9411/"
       SPRING_DB_URL: "jdbc:postgresql://db:5432/demo"
       SPRING_DB_USERNAME: demo
       SPRING_DB_PASSWORD: demo
       SPRING_ADMIN_CLIENT_URL: "http://admin:8080/"
       JAVA_OPTS: >
          -XX:+UnlockExperimentalVMOptions
          -XX:+UseCGroupMemoryLimitForHeap
          -XX:InitialRAMFraction=2
          -XX:MaxRAMFraction=2
          -XX:ParallelGCThreads=2
          -XX:ConcGCThreads=2
          -XX:CICompilerCount=2
          -Djava.util.concurrent.ForkJoinPool.common.parallelism=2
    restart: always
 
    deploy:
    #For swarm replica
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '2'      

## Spring Boot Admin
  admin:
    image: tecnicume/admin:1
    build:
      context: ./admin
      dockerfile: Dockerfile
    volumes:
      - /tmp/cloud
    ports:
      - "8081:8081"
    environment:
      SERVER_PORT : 8081
      SPRING_BOOT_ADMIN_CLIENT_URL: "http://admin:8081/"         
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eureka-node1:8761/eureka/,http://eureka-node2:8762/eureka/"
      JAVA_OPTS: >
          -XX:+UnlockExperimentalVMOptions
          -XX:+UseCGroupMemoryLimitForHeap
          -XX:InitialRAMFraction=2
          -XX:MaxRAMFraction=2
          -XX:ParallelGCThreads=2
          -XX:ConcGCThreads=2
          -XX:CICompilerCount=2
          -Djava.util.concurrent.ForkJoinPool.common.parallelism=2
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '2'      

    networks:
     - backend
    restart: always

##Portainer

#  agent:
#    image: portainer/agent
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#      - /var/lib/docker/volumes:/var/lib/docker/volumes
#    networks:
#      - agent_network
#    deploy:
#      mode: global
#      resources:
#         limits:
#           memory: 512M
#           cpus: '2'      
#      
#      placement:
#        constraints: [node.platform.os == linux]
#
#  portainer:
#    image: portainer/portainer
#    command: -H tcp://tasks.agent:9001 --tlsskipverify
#    ports:
#      - "9000:9000"
#      - "8000:8000"
#    volumes:
#      - portainer_data:/data
#    networks:
#      - agent_network
#    deploy:
#      mode: replicated
#      replicas: 1
#      placement:
#        constraints: [node.role == manager]
#      resources:
#         limits:
#           memory: 512M
#           cpus: '2'   
                       
networks:
  backend:       
#  agent_network:
#    driver: overlay
#    attachable: true

volumes:  
 postgres-data-volume:
  external: true
# portainer_data:
       
